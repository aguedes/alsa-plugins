AVTP Audio Format (AAF) Plugin
==============================

Overview
--------

The AAF plugin is a PCM plugin that uses Audio Video Transport Protocol (AVTP)
to transmit/receive audio samples through a Time-Sensitive Network (TSN)
capable network. The plugin enables media applications to easily implement AVTP
Talker and Listener functionalities.

AVTP is designed to take advantage of generalized Precision Time Protocol
(gPTP) and Forwarding and Queuing Enhancements for Time-Sensitive Streams
(FQTSS).

gPTP ensures AVTP talkers and listeners share the same time reference so the
presentation time from AVTP can be used to inform when PCM samples should be
presented to the application layer. Thus, in order to work properly, the plugin
requires the system clock is synchronized with the PTP time. Such functionality
is provided by ptp4l and phc2sys from Linuxptp project
(linuxptp.sourceforge.net). ptp4l and phc2sys can be set up in many different
ways, below we provide an example. For further information check ptp4l(8) and
phc2sys(8).

On PTP master host run the following commands. Replace $IFNAME by your PTP
capable NIC name. The gPTP.cfg file mentioned below can be found in
/usr/share/doc/linuxptp/ (depending on your distro).
	$ ptp4l -f gPTP.cfg -i $IFNAME
	$ phc2sys -f gPTP.cfg -c $IFNAME -s CLOCK_REALTIME -w

On PTP slave host run:
	$ ptp4l -f gPTP.cfg -i $IFNAME -s
	$ phc2sys -f gPTP.cfg -a -r

FQTSS provides bandwidth reservation and traffic prioritization for the AVTP
stream. Thus, in order to work properly, the plugin requires FQTSS to be
configured properly. The FQTSS features is supported by Linux Traffic Control
system through the mpqrio and cbs qdiscs. Below we provide an example to
configure those qdiscs in order to transmit an AAF stream with 48 kHz sampling
rate, 16-bit sample size, stereo. For further information on how to configure
it check tc-mqprio(8) and tc-cbs(8) man pages.

Configure mpqrio (replace $HANDLE_ID by an unused handle ID):
	$ tc qdisc add dev $IFNAME parent root handle $HANDLE_ID mqprio \
			num_tc 3 map 2 2 1 0 2 2 2 2 2 2 2 2 2 2 2 2 \
			queues 1@0 1@1 2@2 hw 0

Configure cbs:
	$ tc qdisc replace dev $IFNAME parent $HANDLE_ID:1 cbs idleslope 5760 \
			sendslope -994240 hicredit 9 locredit -89 offload 1

Dependency
----------

The AAF plugin uses libavtp to handle AVTP packetization. Libavtp source code
can be found in https://github.com/AVnu/libavtp as well as instructions to
build and install it. If libavtp isn't detected by configure, the plugin isn't
built.

Plugin Configuration
--------------------

The plugin parameters are passed via ALSA configuration file. They are defined
as follows:

	* ifname: Network interface used to transmit/receive AVTP packets.

	* addr: Stream destination MAC address.

	* prio: Priority used by the plugin to transmit AVTP traffic. This
	  option is relevant only when operating in playback mode.

	* streamid: Stream ID associated with the AAF stream transmitted or
	  received by the plugin.

	* mtt: Maximum Transit Time (in microseconds) as defined in AVTP spec
	  section 4.3.3. This option is relevant only when operating in
	  playback mode.

	* time_uncertainty: Maximum Time Uncertainty (in microseconds) as
	  defined by AVTP spec section 4.3.3. This option is relevant only when
	  operating in playback mode.

	* frames_per_pkt: Number of audio frames transmitted in one AVTP
	  packet.

The plugin provides the PCM type "aaf". Configure an AAF PCM virtual device
according to the AAF stream you want to transmit or receive. A hypothetical
configuration file is shown below:

	pcm.aaf {
		type aaf
		ifname eth0
		addr AA:AA:AA:AA:AA:AA
		prio 3
		streamid BB:BB:BB:BB:BB:BB:0001
		mtt 2000
		time_uncertainty 125
		frames_per_pkt 6
	}

Put the above to ~/.asoundrc (or /etc/asound.conf), and use the AAF PCM virtual
device with your ALSA apps. For example, to stream the content from a wav file
through the network, run:

	$ aplay -Daaf foo.wav

To receive the AAF stream generated by the previous command, run:

	$ arecord -Daaf
