AVTP Audio Format (AAF) Plugin
==============================

Overview
--------

The AAF plugin is a PCM plugin that uses Audio Video Transport Protocol (AVTP)
to transmit/receive audio samples through a Time-Sensitive Network (TSN)
capable network. The plugin enables media applications to easily implement AVTP
Talker and Listener functionalities.

Plugin Dependencies
-------------------

The AAF plugin uses libavtp to handle AVTP packetization. Libavtp source code
can be found in https://github.com/AVnu/libavtp as well as instructions to
build and install it. If libavtp isn't detected by configure, the plugin isn't
built.

Plugin Configuration and Usage
------------------------------

The plugin parameters are passed via ALSA configuration file. They are defined
as follows:

	* ifname: Network interface used to transmit/receive AVTP packets.

	* addr: Stream destination MAC address.

	* prio: Priority used by the plugin to transmit AVTP traffic. This
	  option is relevant only when operating in playback mode.

	* streamid: Stream ID associated with the AAF stream transmitted or
	  received by the plugin.

	* mtt: Maximum Transit Time (in microseconds) as defined in AVTP spec
	  section 4.3.3. This option is relevant only when operating in
	  playback mode.

	* time_uncertainty: Maximum Time Uncertainty (in microseconds) as
	  defined by AVTP spec section 4.3.3. This option is relevant only when
	  operating in playback mode.

	* frames_per_pdu: Number of audio frames transmitted in one AVTPDU.

The plugin provides the PCM type "aaf". Configure an AAF PCM virtual device
according to the AAF stream you want to transmit or receive. A hypothetical
configuration file is shown below:

	pcm.aaf {
		type aaf
		ifname eth0
		addr AA:AA:AA:AA:AA:AA
		prio 3
		streamid BB:BB:BB:BB:BB:BB:0001
		mtt 2000
		time_uncertainty 125
		frames_per_pdu 6
	}

Put the above to ~/.asoundrc (or /etc/asound.conf), and use the AAF PCM virtual
device with your ALSA apps. For example, to stream the content from a wav file
through the network, run:

	$ aplay -Daaf foo.wav

To receive the AAF stream generated by the previous command, run the following
command in another host:

	$ arecord -Daaf
